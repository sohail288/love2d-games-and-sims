local Unit = require("tactics_battle.world.Unit")
local TurnManager = require("tactics_battle.systems.TurnManager")

describe("TurnManager", function()
    it("orders units by speed", function()
        local slow = Unit.new({ id = "slow", speed = 5 })
        local fast = Unit.new({ id = "fast", speed = 10 })
        local manager = TurnManager.new({ slow, fast })
        assertEquals(manager:currentUnit().id, "fast")
    end)

    it("advances through units in sequence", function()
        local a = Unit.new({ id = "a", speed = 10 })
        local b = Unit.new({ id = "b", speed = 8 })
        local manager = TurnManager.new({ a, b })
        assertEquals(manager:currentUnit().id, "a")
        assertEquals(manager:advance().id, "b")
        assertEquals(manager:advance().id, "a")
    end)

    it("removes defeated units", function()
        local a = Unit.new({ id = "a", speed = 10 })
        local b = Unit.new({ id = "b", speed = 8 })
        local manager = TurnManager.new({ a, b })
        b:takeDamage(999)
        assertTrue(not b:isAlive())
        manager:removeUnit(b)
        assertEquals(manager:unitCount(), 1)
        assertEquals(manager:currentUnit().id, "a")
    end)

    it("provides a snapshot of the speed-sorted order", function()
        local slow = Unit.new({ id = "slow", speed = 4 })
        local fast = Unit.new({ id = "fast", speed = 9 })
        local manager = TurnManager.new({ slow, fast })

        local order = manager:getOrder()
        assertEquals(#order, 2)
        assertEquals(order[1].id, "fast")

        order[1] = nil
        local freshOrder = manager:getOrder()
        assertEquals(freshOrder[1].id, "fast")
    end)
end)
